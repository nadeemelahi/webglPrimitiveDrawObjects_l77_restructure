/* 
 * author : Nadeem Elahi
 * paid professional email: nad@3deem.com
 * free social media email: nadeem.elahi@gmail.com
 * tel : 905-481-1294
 * COPYRIGHT Sep 2025
 */

"use strict";

class Cube extends ShaderLampDrawObject {
	constructor ( ) {
		super ( ) ; 

		this.verts = [

			// front
			-1 , -1 , -1  , 1   // 0
			,   1 , -1 , -1  , 1   // 1
			,   1 ,  1 , -1  , 1   // 2

			,  -1 , -1 , -1  , 1   // 0
			,   1 ,  1 , -1  , 1   // 2
			,  -1 ,  1 , -1  , 1   // 3

			// back
			,  -1 , -1 ,  1  , 1   // 4
			,   1 ,  1 ,  1  , 1   // 6
			,   1 , -1 ,  1  , 1   // 5

			,  -1 , -1 ,  1  , 1   // 4
			,  -1 ,  1 ,  1  , 1   // 7
			,   1 ,  1 ,  1  , 1   // 6

			// top 
			,  -1 ,  1 , -1  , 1   // 3
			,   1 ,  1 , -1  , 1   // 2
			,   1 ,  1 ,  1  , 1   // 6

			,  -1 ,  1 , -1  , 1   // 3
			,   1 ,  1 ,  1  , 1   // 6
			,  -1 ,  1 ,  1  , 1   // 7

			// bottom
			,  -1 , -1 , -1  , 1   // 0
			,   1 , -1 ,  1  , 1   // 5
			,   1 , -1 , -1  , 1   // 1

			,  -1 , -1 , -1  , 1   // 0
			,  -1 , -1 ,  1  , 1   // 4
			,   1 , -1 ,  1  , 1   // 5

			// right
			,   1 , -1 , -1  , 1   // 1
			,   1 , -1 ,  1  , 1   // 5
			,   1 ,  1 ,  1  , 1   // 6

			,   1 , -1 , -1  , 1   // 1
			,   1 ,  1 ,  1  , 1   // 6
			,   1 ,  1 , -1  , 1   // 2

			// left
			,  -1 , -1 , -1  , 1   // 0
			,  -1 ,  1 ,  1  , 1   // 7
			,  -1 , -1 ,  1  , 1   // 4

			,  -1 , -1 , -1  , 1   // 0
			,  -1 ,  1 , -1  , 1   // 3
			,  -1 ,  1 ,  1  , 1   // 7
		];

		this.cnt = 36 ; // 12 faces * 3 verts/face
		this.len =  144 ; // 36 x 4

	}

}

/*
// 8 corners - 4 front + 4 back
var cubeCornerVertices = [
	// front
	   -1 , -1 , -1  , 1   // 0
	,   1 , -1 , -1  , 1   // 1
	,   1 ,  1 , -1  , 1   // 2
	,  -1 ,  1 , -1  , 1   // 3

	// back
	,  -1 , -1 ,  1  , 1   // 4
	,   1 , -1 ,  1  , 1   // 5
	,   1 ,  1 ,  1  , 1   // 6
	,  -1 ,  1 ,  1  , 1   // 7
]
;

var indices = [
	// front
	[ 0 , 1 , 2 ]
	, [ 0 , 2 , 3 ]

	// back
	, [ 4 , 6 , 5 ]
	, [ 4 , 7 , 6 ]

	// top
	, [ 3 , 2 , 6 ]
	, [ 3 , 6 , 7 ]

	// bottom
	, [ 0 , 5 , 1 ]
	, [ 0 , 4 , 5 ]

	// right
	, [ 1 , 5 , 6 ]
	, [ 1 , 6 , 2 ]


	// left  
	, [ 0 , 7 , 4 ]
	, [ 0 , 3 , 7 ]
];
*/
